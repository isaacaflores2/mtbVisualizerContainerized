@using MtbVisualizer.ViewModels
@model ICollection<ActivityCoordinates>

<div id='myMap' ></div>
<script type='text/javascript'>
    var map, clusterLayer;
    var locationsByType = {"All": []};
    var pinsByType = {"All": []};

    function saveCoordinatesAndLoadMap() {
        @foreach(ActivityCoordinates c in Model) {
            @: var location = new Microsoft.Maps.Location(@c.Latitude, @c.Longitude);
            @: var activityType = '@c.ActivityType';
            @: saveCoordinateToDict(locationsByType, location, activityType)
            @: var pin = new Microsoft.Maps.Pushpin(location, { icon: pinSvg.join(''),  text: '1' });
            @: saveCoordinateToDict(pinsByType, pin, activityType)
        }

        renderMap(locationsByType["All"], pinsByType["All"]);
    }

    function saveCoordinateToDict(dict, coordinate, type) {
        if (dict[type] == null) {
            dict[type] = [];
        }
        dict[type].push(coordinate);
        dict["All"].push(coordinate);
    }

    function renderMap(locations, pins) {
        var navigationBarMode = Microsoft.Maps.NavigationBarMode
        map = new Microsoft.Maps.Map(document.getElementById('myMap'), {
            navigationBarMode: navigationBarMode.compact,
            supportedMapTypes: [Microsoft.Maps.MapTypeId.road, Microsoft.Maps.MapTypeId.aerial, Microsoft.Maps.MapTypeId.grayscale, Microsoft.Maps.MapTypeId.canvasLight, Microsoft.Maps.MapTypeId.canvasDark],
            customMapStyle: {
                elements: mapElementStyle
            },
            settings: {
                landColor: mapLandColor
            }
        });
        
        var rect = Microsoft.Maps.LocationRect.fromLocations(locations)
        map.setView({ bounds: rect, padding: 0 })

        Microsoft.Maps.loadModule('Microsoft.Maps.Clustering', function () {
            var clusterLayer = new Microsoft.Maps.ClusterLayer(pins,
                {
                    clusteredPinCallback: createCustomClusteredPin,
                    gridSize: 80
                });
            map.layers.insert(clusterLayer);
        });        
    }

    function loadMapByType(type) {
        let locations = [];
        let pins = [];
        let mapContainsCoordinates = false;

        if (locationsByType[type] != null && pinsByType[type] != null) {
            locations = locationsByType[type];
            pins = pinsByType[type];

            mapContainsCoordinates = true;
        }

        renderMap(locations, pins);

        return mapContainsCoordinates;
    }
</script>
<script type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?key=AiazNxpO30PT7UwaV6w3yi9yxxYHIJ1CclFCdwHLt68WRhLpgGLMyij33FXz_psx&callback=saveCoordinatesAndLoadMap' async defer></script>

